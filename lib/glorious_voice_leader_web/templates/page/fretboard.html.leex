<div class="chord">
  <%= f = form_for %Plug.Conn{}, "#", [phx_change: :validate] %>
    <div class="selects">
      <%= hidden_input f, :index, value: @index %>
      <%= select f, :root_name, root_options(), value: @root_name %>
      <%= select f, :quality_name, quality_options(), value: @quality_name %>
    </div>
    <div class="buttons">
      <button phx-click="clear_fretboard" phx-value="<%= @index %>">clear</button>
      <%= if @index != 0 do %>
        <button phx-click="remove_fretboard" phx-value="<%= @index %>">remove</button>
      <%= end %>
      <button onclick="play(<%= @index %>, <%= inspect(midi(@playing), char_lists: :as_lists) %>)" type="button">play</button>
      <script>
        function play(index, playing) {
          console.log(index, playing);
          let notes = playing.map(midi => new Tone.Frequency(midi, "midi"))
          synth.triggerAttackRelease(notes, 0.25, undefined, 0.25);
        }
      </script>
    </div>
  </form>

  <div class="fretboard">
    <%= for {frets, string} <- Enum.with_index(@heatmap) |> Enum.reverse() do %>
      <div class="string">
        <%= for {freq, fret} <- Enum.with_index(frets) do %><!--
          --><div class='fret <%= fret_classes(string, fret, @playing, freq) %>'
                  style='color: <%= fret_color(string, fret, freq) %>; background-color: <%= fret_background_color(string, fret, freq) %>'
                  phx-click="click_fret" phx-value=<%= {@index, string, fret, if Enum.at(@playing, string) == fret do nil else fret end} |> :erlang.term_to_binary() |> Base.encode64() %>
                  ></div><!--
        --><%= end %>
      </div>
    <%= end %>
  </div>
</div>
